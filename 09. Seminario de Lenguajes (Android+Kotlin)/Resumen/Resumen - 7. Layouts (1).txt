### Resumen de "Layouts (1)"

*   **Introducción a los Layouts:**
    *   Un Layout (o `ViewGroup`) es un contenedor que define la estructura visual de la interfaz de usuario. Se encarga de organizar las `View` hijas (como `Button`, `TextView`, etc.) en la pantalla.
    *   Los layouts se definen comúnmente en archivos XML en la carpeta `res/layout/`.

*   **LinearLayout:**
    *   Es uno de los layouts más simples. Organiza a sus hijos en una única dirección, ya sea horizontal o vertical.
    *   **Atributo clave:** `android:orientation`
        *   `"vertical"`: Apila los elementos uno debajo del otro.
        *   `"horizontal"`: Coloca los elementos uno al lado del otro.
    *   **Peso (Weight):** El atributo `android:layout_weight` permite distribuir el espacio sobrante entre las `View` hijas. Es especialmente útil para crear interfaces flexibles que se adaptan a diferentes tamaños de pantalla. Para que funcione correctamente, la dimensión correspondiente (`layout_width` para orientación horizontal o `layout_height` para vertical) suele establecerse en `0dp`.

*   **RelativeLayout:**
    *   Permite posicionar a los elementos hijos en relación con otros elementos hermanos o con el `RelativeLayout` padre.
    *   Es más flexible que `LinearLayout` para crear interfaces complejas sin necesidad de anidar múltiples layouts.
    *   **Atributos clave para posicionamiento relativo:**
        *   **Respecto al padre:** `android:layout_alignParentTop`, `android:layout_alignParentBottom`, `android:layout_centerInParent`, `android:layout_centerHorizontal`, etc.
        *   **Respecto a otros elementos (hermanos):** `android:layout_toRightOf="@id/otro_id"`, `android:layout_above="@id/otro_id"`, `android:layout_below="@id/otro_id"`, `android:layout_alignTop="@id/otro_id"`, etc.

*   **FrameLayout:**
    *   Es el layout más simple de todos. Está diseñado para contener un único elemento hijo.
    *   Si se añaden múltiples hijos, los apila uno encima del otro (como una pila de cartas), dibujando el último que se añadió en la parte superior.
    *   Es ideal para mostrar un solo elemento, como una imagen o un fragmento, o para superponer vistas (por ejemplo, un botón de "play" sobre una imagen).

*   **TableLayout:**
    *   Organiza a sus hijos en filas y columnas, de manera similar a una tabla HTML.
    *   Las filas se definen con el elemento `<TableRow>`, que a su vez contiene las `View` para cada celda.
    *   No muestra bordes para las filas, columnas o celdas por defecto.

*   **ScrollView:**
    *   Es un `ViewGroup` especial que permite hacer *scroll* (desplazamiento) de su contenido si este es más grande que el espacio disponible en pantalla.
    *   **Importante:** Solo puede tener **un único hijo directo**. Por lo tanto, si se necesita que varios elementos sean desplazables, deben agruparse dentro de un único layout (como un `LinearLayout`) que será el hijo directo del `ScrollView`.