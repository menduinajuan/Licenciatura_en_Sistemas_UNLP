### Resumen de "Layouts (2)"

*   **ConstraintLayout:**
    *   **Concepto:** Es el layout más potente y flexible de Android. Permite crear interfaces de usuario complejas y adaptables con una jerarquía de vistas plana, lo cual es muy bueno para el rendimiento, ya que evita anidar layouts (un layout dentro de otro).
    *   **Funcionamiento:** En lugar de posicionar las vistas en un orden fijo, se definen "restricciones" (constraints) para cada vista, que determinan su posición y tamaño en relación con otros elementos o con el layout padre.
    *   **Tipos de Restricciones:**
        *   **Posición:** Se puede restringir cualquier lado de una vista (`top`, `bottom`, `start`, `end`) al lado correspondiente de otra vista o del padre. (Ej: `app:layout_constraintTop_toBottomOf="@id/otro_id"`).
        *   **Centrado:** Se pueden centrar vistas horizontal o verticalmente.
        *   **Bias:** Permite ajustar la posición de una vista a lo largo de un eje cuando está restringida por ambos lados (ej. `app:layout_constraintHorizontal_bias="0.7"`).
        *   **Ratio de Dimensión:** Permite que el tamaño de una vista mantenga una proporción específica (ej. `app:layout_constraintDimensionRatio="16:9"` para un video).
    *   **Herramientas Auxiliares:**
        *   **Guidelines:** Líneas de guía invisibles a las que se pueden restringir otras vistas.
        *   **Chains (Cadenas):** Permiten controlar cómo se distribuye un grupo de vistas (horizontal o verticalmente). Estilos de cadena: `spread`, `spread_inside`, `packed`.

*   **RecyclerView:**
    *   **Concepto:** Es un `ViewGroup` diseñado para mostrar listas largas o grillas de datos de manera muy eficiente. Es la evolución moderna y recomendada de `ListView` y `GridView`.
    *   **Eficiencia (Reciclaje de Vistas):** Su principal ventaja es que **recicla** las vistas. En lugar de crear una vista nueva para cada elemento de la lista (lo cual consumiría mucha memoria), `RecyclerView` reutiliza las vistas que ya no son visibles en la pantalla para mostrar los nuevos elementos que aparecen.
    *   **Componentes Clave:**
        1.  **LayoutManager:** Se encarga de posicionar los elementos. Los más comunes son:
            *   `LinearLayoutManager`: Para listas verticales u horizontales.
            *   `GridLayoutManager`: Para grillas.
        2.  **Adapter (`RecyclerView.Adapter`):** Es el puente entre los datos (ej. una lista de objetos) y el `RecyclerView`. Sus responsabilidades son:
            *   Crear las vistas para cada elemento (`onCreateViewHolder`).
            *   Vincular los datos de un elemento específico a su vista (`onBindViewHolder`).
            *   Informar al `RecyclerView` del número total de elementos (`getItemCount`).
        3.  **ViewHolder (`RecyclerView.ViewHolder`):** Es un objeto que representa y almacena las referencias a las vistas de un único elemento de la lista (ej. el `TextView` y el `ImageView` de un item). Esto evita las costosas llamadas a `findViewById()` cada vez que se recicla una vista.