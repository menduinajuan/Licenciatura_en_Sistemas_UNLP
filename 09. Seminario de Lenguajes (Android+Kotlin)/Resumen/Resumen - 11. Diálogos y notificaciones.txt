### Resumen de "Diálogos y notificaciones"

*   **Diálogos (Dialogs):**
    *   **Concepto:** Son pequeñas ventanas que aparecen sobre la `Activity` actual para solicitar al usuario que tome una decisión o introduzca información. No llenan la pantalla.
    *   **`AlertDialog`:** Es el tipo de diálogo más común. Puede contener:
        *   Un título y un mensaje.
        *   Hasta tres botones de acción (positivo, negativo, neutro).
        *   Una lista de elementos seleccionables o un layout personalizado.
    *   **`DialogFragment`:** Es la forma **recomendada** de gestionar diálogos. Es un `Fragment` que muestra un diálogo. Su principal ventaja es que maneja correctamente los eventos del ciclo de vida (como rotaciones de pantalla), evitando que el diálogo se cierre inesperadamente.
    *   **Diálogos Especializados:** Android provee diálogos ya listos para tareas comunes, como `DatePickerDialog` (para seleccionar una fecha) y `TimePickerDialog` (para seleccionar una hora).

*   **Toast:**
    *   **Concepto:** Es un mensaje emergente muy simple que aparece en la pantalla por un corto período y luego se desvanece. No requiere interacción del usuario.
    *   **Uso:** Ideal para notificar al usuario sobre una operación que ha finalizado, como "Mensaje enviado" o "Archivo guardado".
    *   **Implementación:** Se crea con `Toast.makeText(context, "Mensaje", Toast.LENGTH_SHORT).show()`.

*   **Snackbar:**
    *   **Concepto:** Similar a un `Toast`, pero más moderno y funcional. Aparece en la parte inferior de la pantalla.
    *   **Ventajas sobre Toast:**
        *   Puede incluir un **botón de acción** opcional, como "Deshacer" después de eliminar un elemento.
        *   El usuario puede descartarlo deslizándolo fuera de la pantalla.
    *   **Uso:** Forma parte de la librería de Material Design y es preferido sobre `Toast` para notificaciones que pueden requerir una acción inmediata.

*   **Notificaciones (Notifications):**
    *   **Concepto:** Son mensajes que se muestran **fuera de la interfaz de usuario** de tu aplicación (en la barra de estado y en el panel de notificaciones) para informar al usuario sobre eventos importantes, incluso cuando no está usando la app.
    *   **Canales de Notificación (Notification Channels):** A partir de Android 8.0 (API 26), todas las notificaciones **deben** asignarse a un canal. Los canales permiten a los usuarios agrupar notificaciones y controlar su comportamiento (sonido, vibración, importancia) de forma granular. Los canales se deben crear antes de poder enviar una notificación.
    *   **Creación de una Notificación:**
        1.  Se utiliza `NotificationCompat.Builder` para construir la notificación de manera compatible con versiones anteriores de Android.
        2.  Se establecen sus propiedades: ícono pequeño (`setSmallIcon`), título (`setContentTitle`), texto (`setContentText`), prioridad (`setPriority`), etc.
        3.  Se crea un `PendingIntent` para definir qué `Intent` se ejecutará cuando el usuario toque la notificación (generalmente, abrir una `Activity` específica).
        4.  Se utiliza `NotificationManagerCompat` para mostrar la notificación.